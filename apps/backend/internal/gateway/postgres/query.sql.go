// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package postgres

import (
	"context"
	"time"

	uuid "github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (id, name, amount, event_date, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateEventParams struct {
	ID        string
	Name      string
	Amount    int32
	EventDate time.Time
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.ID,
		arg.Name,
		arg.Amount,
		arg.EventDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payments (event_id, payer_id, debtor_id, amount) VALUES ($1, $2, $3, $4)
`

type CreatePaymentParams struct {
	EventID  string
	PayerID  uuid.UUID
	DebtorID uuid.UUID
	Amount   int32
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.Exec(ctx, createPayment,
		arg.EventID,
		arg.PayerID,
		arg.DebtorID,
		arg.Amount,
	)
	return err
}

const findAllEvents = `-- name: FindAllEvents :many
SELECT id, name, amount, event_date, created_at, updated_at FROM events
`

func (q *Queries) FindAllEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, findAllEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Amount,
			&i.EventDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllUsers = `-- name: FindAllUsers :many
SELECT id, name, avatar, email, created_at, updated_at FROM users
`

func (q *Queries) FindAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, findAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Avatar,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEventById = `-- name: FindEventById :one
SELECT id, name, amount, event_date, created_at, updated_at FROM events WHERE id = $1 LIMIT 1
`

func (q *Queries) FindEventById(ctx context.Context, id string) (Event, error) {
	row := q.db.QueryRow(ctx, findEventById, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Amount,
		&i.EventDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPaymentByDebtorId = `-- name: FindPaymentByDebtorId :one
SELECT event_id, payer_id, debtor_id, amount FROM payments WHERE event_id = $1 AND debtor_id = $2 LIMIT 1
`

type FindPaymentByDebtorIdParams struct {
	EventID  string
	DebtorID uuid.UUID
}

func (q *Queries) FindPaymentByDebtorId(ctx context.Context, arg FindPaymentByDebtorIdParams) (Payment, error) {
	row := q.db.QueryRow(ctx, findPaymentByDebtorId, arg.EventID, arg.DebtorID)
	var i Payment
	err := row.Scan(
		&i.EventID,
		&i.PayerID,
		&i.DebtorID,
		&i.Amount,
	)
	return i, err
}

const findPaymentsByEventId = `-- name: FindPaymentsByEventId :many
SELECT event_id, payer_id, debtor_id, amount FROM payments WHERE event_id = $1
`

func (q *Queries) FindPaymentsByEventId(ctx context.Context, eventID string) ([]Payment, error) {
	rows, err := q.db.Query(ctx, findPaymentsByEventId, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.EventID,
			&i.PayerID,
			&i.DebtorID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, name, avatar, email, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Avatar,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBorrowingCreditAmountsByUserID = `-- name: ListBorrowingCreditAmountsByUserID :many
SELECT payer_id AS user_id, SUM(amount)::bigint AS amount
FROM payments
WHERE debtor_id = $1
GROUP BY payer_id
ORDER BY payer_id
`

type ListBorrowingCreditAmountsByUserIDRow struct {
	UserID uuid.UUID
	Amount int64
}

func (q *Queries) ListBorrowingCreditAmountsByUserID(ctx context.Context, debtorID uuid.UUID) ([]ListBorrowingCreditAmountsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, listBorrowingCreditAmountsByUserID, debtorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBorrowingCreditAmountsByUserIDRow
	for rows.Next() {
		var i ListBorrowingCreditAmountsByUserIDRow
		if err := rows.Scan(&i.UserID, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLendingCreditAmountsByUserID = `-- name: ListLendingCreditAmountsByUserID :many
SELECT debtor_id AS user_id, SUM(amount)::bigint AS amount
FROM payments
WHERE payer_id = $1
GROUP BY debtor_id
ORDER BY debtor_id
`

type ListLendingCreditAmountsByUserIDRow struct {
	UserID uuid.UUID
	Amount int64
}

func (q *Queries) ListLendingCreditAmountsByUserID(ctx context.Context, payerID uuid.UUID) ([]ListLendingCreditAmountsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, listLendingCreditAmountsByUserID, payerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLendingCreditAmountsByUserIDRow
	for rows.Next() {
		var i ListLendingCreditAmountsByUserIDRow
		if err := rows.Scan(&i.UserID, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
