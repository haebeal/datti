// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgres

import (
	"context"
	"time"

	uuid "github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (id, name, payer_id, amount, event_date, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateEventParams struct {
	ID        string
	Name      string
	PayerID   uuid.UUID
	Amount    int32
	EventDate time.Time
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.ID,
		arg.Name,
		arg.PayerID,
		arg.Amount,
		arg.EventDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payments (event_id, debtor_id, amount) VALUES ($1, $2, $3)
`

type CreatePaymentParams struct {
	EventID  string
	DebtorID uuid.UUID
	Amount   int32
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.Exec(ctx, createPayment, arg.EventID, arg.DebtorID, arg.Amount)
	return err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const findAllEvents = `-- name: FindAllEvents :many
SELECT id, name, payer_id, amount, event_date, created_at, updated_at FROM events
`

func (q *Queries) FindAllEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, findAllEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PayerID,
			&i.Amount,
			&i.EventDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllUsers = `-- name: FindAllUsers :many
SELECT id, name, avatar, email, created_at, updated_at FROM users
`

func (q *Queries) FindAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, findAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Avatar,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findEventById = `-- name: FindEventById :one
SELECT id, name, payer_id, amount, event_date, created_at, updated_at FROM events WHERE id = $1 LIMIT 1
`

func (q *Queries) FindEventById(ctx context.Context, id string) (Event, error) {
	row := q.db.QueryRow(ctx, findEventById, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PayerID,
		&i.Amount,
		&i.EventDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPaymentsByEventId = `-- name: FindPaymentsByEventId :many
SELECT event_id, debtor_id, amount FROM payments WHERE event_id = $1
`

func (q *Queries) FindPaymentsByEventId(ctx context.Context, eventID string) ([]Payment, error) {
	rows, err := q.db.Query(ctx, findPaymentsByEventId, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(&i.EventID, &i.DebtorID, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, name, avatar, email, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Avatar,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE events SET name = $2, payer_id = $3, amount = $4, event_date = $5, updated_at = $6 WHERE id = $1
`

type UpdateEventParams struct {
	ID        string
	Name      string
	PayerID   uuid.UUID
	Amount    int32
	EventDate time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.Exec(ctx, updateEvent,
		arg.ID,
		arg.Name,
		arg.PayerID,
		arg.Amount,
		arg.EventDate,
		arg.UpdatedAt,
	)
	return err
}

const updatePayment = `-- name: UpdatePayment :exec
UPDATE payments SET debtor_id = $2, amount = $3 WHERE event_id = $1
`

type UpdatePaymentParams struct {
	EventID  string
	DebtorID uuid.UUID
	Amount   int32
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) error {
	_, err := q.db.Exec(ctx, updatePayment, arg.EventID, arg.DebtorID, arg.Amount)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = $2, avatar = $3, email = $4 WHERE id = $1
`

type UpdateUserParams struct {
	ID     uuid.UUID
	Name   string
	Avatar string
	Email  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Avatar,
		arg.Email,
	)
	return err
}
