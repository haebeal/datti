// Code generated by MockGen. DO NOT EDIT.
// Source: internal/presentation/api/handler/credit.go
//
// Generated by this command:
//
//	mockgen -source=internal/presentation/api/handler/credit.go -destination=internal/presentation/api/handler/test/mockCreditUseCase.gen.go -package=handler_test
//

// Package handler_test is a generated GoMock package.
package handler_test

import (
	context "context"
	reflect "reflect"

	handler "github.com/haebeal/datti/internal/presentation/api/handler"
	gomock "go.uber.org/mock/gomock"
)

// MockCreditUseCase is a mock of CreditUseCase interface.
type MockCreditUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreditUseCaseMockRecorder
	isgomock struct{}
}

// MockCreditUseCaseMockRecorder is the mock recorder for MockCreditUseCase.
type MockCreditUseCaseMockRecorder struct {
	mock *MockCreditUseCase
}

// NewMockCreditUseCase creates a new mock instance.
func NewMockCreditUseCase(ctrl *gomock.Controller) *MockCreditUseCase {
	mock := &MockCreditUseCase{ctrl: ctrl}
	mock.recorder = &MockCreditUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreditUseCase) EXPECT() *MockCreditUseCaseMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockCreditUseCase) List(ctx context.Context, input handler.CreditListInput) (*handler.CreditListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, input)
	ret0, _ := ret[0].(*handler.CreditListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCreditUseCaseMockRecorder) List(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCreditUseCase)(nil).List), ctx, input)
}
