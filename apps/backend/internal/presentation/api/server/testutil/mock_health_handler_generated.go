// Code generated by MockGen. DO NOT EDIT.
// Source: internal/presentation/api/handler/health.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockHealthHandler is a mock of HealthHandler interface.
type MockHealthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHealthHandlerMockRecorder
}

// MockHealthHandlerMockRecorder is the mock recorder for MockHealthHandler.
type MockHealthHandlerMockRecorder struct {
	mock *MockHealthHandler
}

// NewMockHealthHandler creates a new mock instance.
func NewMockHealthHandler(ctrl *gomock.Controller) *MockHealthHandler {
	mock := &MockHealthHandler{ctrl: ctrl}
	mock.recorder = &MockHealthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthHandler) EXPECT() *MockHealthHandlerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockHealthHandler) Check(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockHealthHandlerMockRecorder) Check(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockHealthHandler)(nil).Check), c)
}
