// Code generated by MockGen. DO NOT EDIT.
// Source: internal/presentation/api/handler/payment.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockPaymentHandler is a mock of PaymentHandler interface.
type MockPaymentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentHandlerMockRecorder
}

// MockPaymentHandlerMockRecorder is the mock recorder for MockPaymentHandler.
type MockPaymentHandlerMockRecorder struct {
	mock *MockPaymentHandler
}

// NewMockPaymentHandler creates a new mock instance.
func NewMockPaymentHandler(ctrl *gomock.Controller) *MockPaymentHandler {
	mock := &MockPaymentHandler{ctrl: ctrl}
	mock.recorder = &MockPaymentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentHandler) EXPECT() *MockPaymentHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentHandler) Create(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPaymentHandlerMockRecorder) Create(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentHandler)(nil).Create), c)
}

// Get mocks base method.
func (m *MockPaymentHandler) Get(c echo.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockPaymentHandlerMockRecorder) Get(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPaymentHandler)(nil).Get), c, id)
}
