// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/credit.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/credit.go -destination=internal/usecase/test/mockCreditRepository.gen.go -package=usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/haebeal/datti/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCreditRepository is a mock of CreditRepository interface.
type MockCreditRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreditRepositoryMockRecorder
	isgomock struct{}
}

// MockCreditRepositoryMockRecorder is the mock recorder for MockCreditRepository.
type MockCreditRepositoryMockRecorder struct {
	mock *MockCreditRepository
}

// NewMockCreditRepository creates a new mock instance.
func NewMockCreditRepository(ctrl *gomock.Controller) *MockCreditRepository {
	mock := &MockCreditRepository{ctrl: ctrl}
	mock.recorder = &MockCreditRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreditRepository) EXPECT() *MockCreditRepositoryMockRecorder {
	return m.recorder
}

// ListBorrowingCreditsByUserID mocks base method.
func (m *MockCreditRepository) ListBorrowingCreditsByUserID(arg0 context.Context, arg1 uuid.UUID) ([]*domain.Credit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBorrowingCreditsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Credit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBorrowingCreditsByUserID indicates an expected call of ListBorrowingCreditsByUserID.
func (mr *MockCreditRepositoryMockRecorder) ListBorrowingCreditsByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBorrowingCreditsByUserID", reflect.TypeOf((*MockCreditRepository)(nil).ListBorrowingCreditsByUserID), arg0, arg1)
}

// ListLendingCreditsByUserID mocks base method.
func (m *MockCreditRepository) ListLendingCreditsByUserID(arg0 context.Context, arg1 uuid.UUID) ([]*domain.Credit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLendingCreditsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Credit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLendingCreditsByUserID indicates an expected call of ListLendingCreditsByUserID.
func (mr *MockCreditRepositoryMockRecorder) ListLendingCreditsByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLendingCreditsByUserID", reflect.TypeOf((*MockCreditRepository)(nil).ListLendingCreditsByUserID), arg0, arg1)
}
