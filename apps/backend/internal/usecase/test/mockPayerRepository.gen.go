// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/payer.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/payer.go -destination=internal/usecase/test/mockPayerRepository.gen.go -package=usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/haebeal/datti/internal/domain"
	v2 "github.com/oklog/ulid/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockPayerRepository is a mock of PayerRepository interface.
type MockPayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPayerRepositoryMockRecorder
	isgomock struct{}
}

// MockPayerRepositoryMockRecorder is the mock recorder for MockPayerRepository.
type MockPayerRepositoryMockRecorder struct {
	mock *MockPayerRepository
}

// NewMockPayerRepository creates a new mock instance.
func NewMockPayerRepository(ctrl *gomock.Controller) *MockPayerRepository {
	mock := &MockPayerRepository{ctrl: ctrl}
	mock.recorder = &MockPayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayerRepository) EXPECT() *MockPayerRepositoryMockRecorder {
	return m.recorder
}

// FindByEventID mocks base method.
func (m *MockPayerRepository) FindByEventID(userID uuid.UUID, eventID v2.ULID) (*domain.Payer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEventID", userID, eventID)
	ret0, _ := ret[0].(*domain.Payer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEventID indicates an expected call of FindByEventID.
func (mr *MockPayerRepositoryMockRecorder) FindByEventID(userID, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEventID", reflect.TypeOf((*MockPayerRepository)(nil).FindByEventID), userID, eventID)
}
