// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/paymentEvent.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/haebeal/datti/internal/domain"
)

// MockPaymentEventRepository is a mock of PaymentEventRepository interface.
type MockPaymentEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentEventRepositoryMockRecorder
}

// MockPaymentEventRepositoryMockRecorder is the mock recorder for MockPaymentEventRepository.
type MockPaymentEventRepositoryMockRecorder struct {
	mock *MockPaymentEventRepository
}

// NewMockPaymentEventRepository creates a new mock instance.
func NewMockPaymentEventRepository(ctrl *gomock.Controller) *MockPaymentEventRepository {
	mock := &MockPaymentEventRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentEventRepository) EXPECT() *MockPaymentEventRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentEventRepository) Create(arg0 *domain.PaymentEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPaymentEventRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentEventRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockPaymentEventRepository) Delete(arg0 *domain.PaymentEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPaymentEventRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPaymentEventRepository)(nil).Delete), arg0)
}

// FindAll mocks base method.
func (m *MockPaymentEventRepository) FindAll() ([]*domain.PaymentEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*domain.PaymentEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPaymentEventRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPaymentEventRepository)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockPaymentEventRepository) FindByID(arg0 string) (*domain.PaymentEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*domain.PaymentEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPaymentEventRepositoryMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPaymentEventRepository)(nil).FindByID), arg0)
}

// Update mocks base method.
func (m *MockPaymentEventRepository) Update(arg0 *domain.PaymentEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPaymentEventRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPaymentEventRepository)(nil).Update), arg0)
}
